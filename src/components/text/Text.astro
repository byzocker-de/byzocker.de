---
import Icon from "./icons/Icon.astro";
---

<html>
    <p id="test"></p>
    <div class="divTable textTable crt">
        <div class="divTableBody">
            <div class="divTableCell">
                <div class="divTableRow">
                    <div class="divTableCell">
                        <div class="BigTextH1 transformRot marg_bot">byzocker</div>
                    </div>
                </div>
                <div class="divTableRow  ">
                    <div class="divTableCell">
                        <a id="spotifyText">
                            loading...
                            <!-- â™« {spotify.artist} - {spotify.title} -->
                            <!-- currently not listening to anything... -->
                        </a>
                    </div>
                </div>
                <div class="divTableRow">
                    <div class="divTableCell">
                        <div class="divTableRow iconRow">
                            <!-- Steam -->
                            <div class="divTableCell">
                                <Icon
                                    link="https://steamcommunity.com/id/byzocker"
                                    source="/icons/steam.svg"
                                    imgsize="50px"
                                />
                            </div>
                            <!-- YouTube -->
                            <div class="divTableCell">
                                <Icon
                                    link="https://youtube.com/@byzockerr"
                                    source="/icons/youtube.svg"
                                    imgsize="50px"
                                />
                            </div>
                            <!-- Instagram -->
                            <div class="divTableCell">
                                <Icon
                                    link="https://instagram.com/byzocker"
                                    source="/icons/instagram.svg"
                                    imgsize="50px"
                                />
                            </div>
                        </div>

                        <div class="divTableRow iconRow">
                            <!-- Your-Spotify  -->
                            <div class="divTableCell blackIcon">
                                <Icon
                                    link="https://spotify.byzocker.de/?gname=Last+month&token=9ae37424-3f7d-454e-bbb3-a9cc0f78eb95"
                                    source="/icons/your-spotify.svg"
                                    imgsize="50px"
                                />
                            </div>
                            <!-- Spotify -->
                            <div class="divTableCell">
                                <Icon
                                    link="https://open.spotify.com/user/21fnqjzsgtwz3vf4cethlrezq?si=962d341e70534c45"
                                    source="/icons/spotify.svg"
                                    imgsize="50px"
                                />
                            </div>
                            <!-- Soundcloud -->
                            <div class="divTableCell">
                                <Icon
                                    link="https://soundcloud.com/byzocker"
                                    source="/icons/soundcloud.svg"
                                    imgsize="50px"
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        div.textTable {
            border-collapse: collapse;
        }
        /* DivTable.com */
        .divTable {
            display: table;
        }
        .divTableRow {
            display: table-row;
        }

        .divTableCell {
            display: table-cell;
        }
        .divTableBody {
            display: table-row-group;
        }
        .divTable.textTable .divTableCell {
            padding: 5px 5px;
        }
    </style>

    <script></script>

    <style>
        .BigTextH1 {
            font-size: 150px;
            font-weight: bold;

        }
        .marg_bot{
            margin-bottom: .5em;
        }
        a:active,
        a:hover,
        a:link,
        a:visited {
            color: inherit;
            text-decoration: none;
            cursor: default;
        }
        .spotLinkActive:hover {
            text-decoration: underline white;
            cursor: pointer;
        }
        .transformRot {
            transform-origin: 52% 57%;
            transform: rotate(-5deg) skew(-5deg, -2deg);

        }
        @media only screen and (max-width: 750px) {
            .BigTextH1 {
                font-size: 8vh;
            }
        }
    </style>

    <script>
        // 
        import dayjs, { locale } from 'dayjs';
        import relativeTime from 'dayjs/plugin/relativeTime';
        import 'dayjs/locale/de';
        import 'dayjs/locale/en';


        //
        dayjs.extend(relativeTime);

        // 
        const userId = "322035497826385920";
        const lanyardUrl = "https://api.lanyard.rest/v1/users/" + userId;
        let activitiesT = document.getElementById(
            "spotifyText"
        ) as HTMLAnchorElement;

        //
        function wait(ms){
            let start = new Date().getTime();
            let end = start;
            while(end < start + ms) {
                end = new Date().getTime();
            }
        }

        // Locale
        const browserLanguage = window.navigator.language; //decting browser language
        console.log("Dectected Browser Language: " + browserLanguage);  //outputting browser language to dev console


        // defining default strings
        let strRemaining = ' remaining';
        let strWith = ' with ';
        let strCurrentActivity = 'Current Activity;';
        let strCurrentlyListening = 'Currently listening to';
        let strNothing = 'Currently doing nothing.';
        dayjs.locale('en');

    
        let isGerman = browserLanguage.includes("de");  //checking if browser language is german
        if (isGerman == true) {
            console.log("Dectected German Language")

            // define german strings
            strRemaining = ' Ã¼brig';
            strWith = ' mit ';
            strCurrentActivity = 'Aktuelle AktiviÃ¤t: ';
            strCurrentlyListening = 'HÃ¶rt momentan: ';
            strNothing = 'Keine AktiviÃ¤t.';

            dayjs.locale('de');

        }
        console.log("Current Dayjs locale: " + dayjs.locale());




        // 
        async function fetchDiscordPresence() {
            try {
                let response = await fetch(lanyardUrl);
                let lanyardjson = await response.json();
                let lanyard = lanyardjson.data;
                let logspotify = (value) =>
                    console.log("detected listening \n'" + value + "'");
                let logactivity = (value) =>
                    console.log("detected activity \n'" + value + "'");

                const testp = document.getElementById("test");

                if (lanyardjson.success == true) {
                    if (lanyard.listening_to_spotify == true) {
                        let spotify = {
                            title: lanyard.spotify.song,
                            artist: lanyard.spotify.artist,
                            link:
                                "https://open.spotify.com/track/" +
                                lanyard.spotify.track_id,
                        };
                        let songRemaining = dayjs(lanyard.spotify.timestamps.end).from(Date.now(), true); // define remaining length of song
                        // testp.textContent = songRemaining.toString(); 
                        console.log(logspotify(spotify.artist + " - " + spotify.title)  + strWith + songRemaining + strRemaining);
                        activitiesT.textContent =
                            strCurrentlyListening + "â™« " + spotify.artist + " - " + spotify.title + " (" + songRemaining + strRemaining + ")";
                        activitiesT.href = spotify.link;
                        activitiesT.classList.add("spotLinkActive");
                    } else {
                        try {
                            if (typeof lanyard.activities[0].name === "string") {
                                let activity0 = {
                                    name: lanyard.activities[0].name,
                                    state: lanyard.activities[0].state,
                                    details: lanyard.activities[0].details,
                                };
                                activitiesT.classList.remove("spotLinkActive");
                                activitiesT.removeAttribute("href");
                                logactivity(
                                    activity0.name + " - " + activity0.details
                                );
                                if (activity0.name == "Code") {
                                        activitiesT.textContent = strCurrentActivity +  "âŒ¨ " + "Visual Studio Code" + " - " + activity0.details;
                                        console.log(activity0.state);
                                } else {
                                        activitiesT.textContent = strCurrentActivity + "ðŸŽ® " + activity0.name + " - " + activity0.details;
                                }
                            }
                        } catch (error) {
                            activitiesT.textContent =
                                "Currently doing nothing.";
                            activitiesT.classList.remove("spotLinkActive");
                            activitiesT.removeAttribute("href");
                            console.log("not detected any activity")
                        }
                    }

                }

            } catch (error) {
                activitiesT.textContent = "Error";
                activitiesT.removeAttribute("href");
                activitiesT.classList.remove("spotLinkActive");
                await wait(50) // Wait 50ms 
                activitiesT.textContent = '';
                console.log("Something went wrong connecting to Lanyard...");
            }
        }
        fetchDiscordPresence();
        setInterval(fetchDiscordPresence, 10000);
    </script>


</html>
